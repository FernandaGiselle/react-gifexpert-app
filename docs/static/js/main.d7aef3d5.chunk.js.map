{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACTC,mBAAU,IADD,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACI,sBAAMC,SATW,SAACC,GACnBA,EAAEC,iBAELJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAIV,SAEE,uBACCO,KAAK,OACLC,MAAST,EACTU,SAjBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,aAqB9BZ,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,Y,mCC1BrBC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAYH,GADhD,sEAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC7B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARrB,kBAWZM,GAXY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OADAc,QAAQC,IAAML,EAAOV,GAEjB,sBAAKgB,UAAU,oCAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAKA,EAAL,WCHES,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECDf,SAACA,GAAc,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwB1C,OAlBAC,qBAAU,WACR1B,EAASC,GACR0B,MAAO,SAAAC,GAEJC,YAAY,WAEVJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAGZ,UAIN,CAACtB,IAGGuB,EDpB+BM,CAAc7B,GAAlCa,EAHyB,EAG9BN,KAAae,EAHiB,EAGjBA,QAatB,OACI,qCACC,6BAAKtB,IACLsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAKYL,EAAOJ,KAAK,SAACC,GAAD,OAEJ,cAAC,EAAD,eAEIA,GADEA,EAAIC,aE5BzBmB,EAAe,WAAM,MAIEhD,mBAAU,CAAC,sBAJb,mBAI3BiD,EAJ2B,KAIflD,EAJe,KAYlC,OAEA,qCAEI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEIkD,EAAWtB,KAAK,SAAAT,GAAQ,OAGzB,aADA,CACC,EAAD,CAEOA,SAAWA,GADLA,Y,MCxBpBgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d7aef3d5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories }) => {\r\n    const [inputValue, setInputValue ] = useState ('')\r\n\r\n    const handleInputChange = (e) => {\r\n       setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n       e.preventDefault ();\r\n\r\nif (inputValue.trim().length > 2 ){\r\n    setCategories (cats => [inputValue, ...cats ]);\r\n    setInputValue('');\r\n}\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        \r\n          <input\r\n           type=\"text\"\r\n           value = {inputValue}\r\n           onChange={handleInputChange}\r\n           />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.protoTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI ( category ) }jujutsu&limit=10&api_key=DVBXKeIQMtmq1ex0RcP4mWz8bGosZCoQ`\r\n    const resp= await fetch(url);\r\n    const {data} = await resp.json ();\r\n    const gifs = data.map ( img => {\r\n      return{\r\n          id: img.id,\r\n          title: img.title,\r\n          url: img.images?.downsized_medium.url\r\n      }\r\n    })\r\n    return gifs; \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n   \r\n    console.log(  title, url );\r\n    return (\r\n        <div className=\"animate__animated animate__bounce\">\r\n           <img src={url} alt={title}/>\r\n           <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    //const [count, setCount] = useState(0);\r\n     const { data:images, loading}  = useFetchGifs( category); \r\n     \r\n     //console.log(data);\r\n   /* const [images, setImages] = useState([]);\r\n   \r\n\r\n    useEffect( () => {\r\n      getGifs( category )\r\n       .then( imgs => setImages (imgs))\r\n    }, [category ] )*/\r\n\r\n    \r\n   \r\n    return (\r\n        <>\r\n         <h3>{category}</h3> \r\n        {loading && <p>Loading</p>}\r\n        <div className=\"card-grid\">\r\n            \r\n                    {\r\n                        \r\n                    // eslint-disable-next-line array-callback-return\r\n                    images.map( (img) => (\r\n                         \r\n                            <GifGridItem\r\n                            key={ img.id }\r\n                            {...img}\r\n                            />\r\n                        \r\n                    \r\n                    ))\r\n                    }\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n/*<h1>{count}</h1>\r\n            <button onClick = {()=> setCount( count + 1)}> </button>*/","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n});\r\nuseEffect(() =>{\r\n  getGifs( category )\r\n  .then ( imgs =>{\r\n\r\n      setTimeout (()=>{\r\n        \r\n        setState({\r\n            data: imgs,\r\n            loading: false\r\n        });\r\n\r\n      }, 3000);\r\n\r\n    \r\n  })\r\n}, [category]);\r\n\r\n\r\nreturn state; //{data: [], loading:true};\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n   \r\n   //const categories = ['One Punch', 'Samurai X', 'Dragon Ball' ];\r\n   \r\nconst [categories, setCategories] = useState( ['jujutsu no kaisen'] )\r\n  // const handleAdd = () => {\r\n    //setcategories( [...categories, 'Boku No Hero']);\r\n   //setcategories( cats => [...cats, 'Boku No Hero']);\r\n\r\n   \r\n\r\n   //console.log(categories);\r\nreturn (\r\n\r\n<>\r\n\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory setCategories={ setCategories }/>\r\n    <hr/>\r\n    \r\n    <ol>\r\n        { \r\n        categories.map( category  =>  (\r\n\r\n       //return <li key={category}> {category}</li>\r\n       <GifGrid \r\n              key={ category }\r\n              category={ category }\r\n              />\r\n        ))\r\n    }\r\n    </ol>\r\n\r\n</>\r\n\r\n)\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}